#BlueJ class context
comment0.target=TicTacToeBoard
comment0.text=\r\n\ Represents\ and\ maintains\ a\ Tic-Tac-Toe\ board.\ Accepts\ move\ input\ in\ various\ \r\n\ forms\ and\ throws\ exceptions\ for\ invalid\ or\ illegal\ entries.\ Places\r\n\ valid\ moves\ and\ determines\ if\ the\ game\ has\ been\ won.\ Displays\ the\ board\r\n\ contents.\r\n
comment1.params=
comment1.target=TicTacToeBoard()
comment1.text=\r\n\ Fills\ the\ grid\ with\ space\ characters.\r\n
comment2.params=input\ mark
comment2.target=boolean\ move(java.lang.String,\ char)
comment2.text=\r\n\ Validates\ a\ human\ player's\ String\ input\ for\ a\ move.\ \r\n\ @param\ input\ A\ string\ that\ is\ expected\ to\ be\ a\ two-character\ keyboard\r\n\ entry\ from\ the\ user\ representing\ a\ row\ and\ a\ column.\r\n\ @param\ mark\ The\ mark\ (X\ or\ O)\ the\ calling\ Player\ wishes\ to\ place\ on\ the\r\n\ board.\r\n\ @return\ <code>true</code>\ if\ the\ move\ resulted\ in\ a\ winning\ game,\ \r\n\ <code>false</code>\ otherwise.\r\n\ @throws\ InvalidInputException\ if\ the\ input\ is\ not\ two\ characters\ \r\n\ long\ and\ does\ not\ contain\ a\ valid\ letter\ for\ the\ first\ character\ \r\n\ and\ a\ valid\ number\ for\ the\ second\ character,\ both\ within\ the\ range\ \r\n\ of\ the\ board.\r\n\ @throws\ IllegalMoveException\ if\ the\ move\ attempts\ to\ place\ a\ mark\ \r\n\ on\ a\ space\ that\ is\ already\ occupied.\r\n
comment3.params=row\ col\ mark
comment3.target=boolean\ move(int,\ int,\ char)
comment3.text=\r\n\ Validates\ and\ processes\ row\ and\ column\ int\ values\ for\ a\ move.\ \r\n\ @param\ row\ Value\ representing\ the\ row.\r\n\ @param\ col\ Value\ representing\ the\ column.\r\n\ @param\ mark\ The\ mark\ (X\ or\ O)\ the\ calling\ Player\ wishes\ to\ place\ on\ the\r\n\ board.\r\n\ @return\ <code>true</code>\ if\ the\ move\ resulted\ in\ a\ winning\ game,\ \r\n\ <code>false</code>\ otherwise\r\n\ @throws\ IllegalMoveException\ if\ the\ move\ attempts\ to\ place\ a\r\n\ mark\ on\ a\ space\ that\ is\ already\ occupied.\r\n
comment4.params=row\ col
comment4.target=char\ getSpace(int,\ int)
comment4.text=\r\n\ Returns\ the\ character\ at\ a\ specified\ grid\ location.\r\n\ @param\ row\ Value\ representing\ the\ row.\r\n\ @param\ col\ Value\ representing\ the\ column.\r\n\ @return\ Character\ at\ grid\ location\ specified\ by\ row\ and\ column.\r\n
comment5.params=mark
comment5.target=boolean\ isWin(char)
comment5.text=\r\n\ Determines\ if\ the\ board\ has\ been\ won\ with\ a\ specified\ mark.\r\n\ @param\ mark\ A\ mark\ to\ search\ for\ (X\ or\ O).\r\n\ @return\ <code>true</code>\ if\ the\ board\ has\ been\ won\ by\ the\ specified\ \r\n\ mark.\r\n
comment6.params=
comment6.target=boolean\ isTie()
comment6.text=\r\n\ Determines\ if\ the\ game\ has\ resulted\ in\ a\ tie.\r\n\ @return\ <code>true</code>\ if\ the\ game\ is\ a\ tie.\r\n
comment7.params=
comment7.target=void\ display()
comment7.text=\r\n\ Displays\ the\ board.\r\n
comment8.params=row
comment8.target=void\ printRow(int)
comment8.text=\r\n\ Utility\ method\ called\ by\ display.\r\n\ @param\ row\ The\ row\ to\ be\ displayed.\r\n
comment9.params=
comment9.target=void\ clearGrid()
comment9.text=\r\n\ Fills\ the\ grid\ with\ SPACE\ characters.\r\n
numComments=10
